{"version":3,"sources":["webpack:///./src/libs/UtilsContract.js"],"names":["deployContract","tokenName","tokenSymbol","totalSupply","interest","Promise","resolve","reject","web3Instance","store","state","web3Provider","abi","tokenBEP20","bytecode","contract","eth","Contract","deploy","data","arguments","send","from","userAddress","gas","gasPrice","on","error","then","res","options","address","err","console","log","getBalanceByToken","tokenAddress","methods","balanceOf","call","balanceBUSD","parseFloat","toFixed","buyTokensByContract","numberTokens","buyTokens","BigInt","claimTokensByContract","claimTokens"],"mappings":"k5hhBASaA,EAAiB,SAACC,EAAWC,EAAaC,EAAaC,GAEhE,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAGIJ,GAA6B,EAAKC,EAAS,IAG3C,IAAMI,EAAeC,OAAMC,MAAMC,aAG3BC,EAAMC,EAAWD,IACjBE,EAAWD,EAAWC,SAGtBC,EAAW,IAAIP,EAAaQ,IAAIC,SAASL,GAC/CG,EAASG,OAAO,CACZC,KAAML,EACNM,UAAW,CAACnB,EAAWC,EAAaC,KACrCkB,KAAK,CACJC,KAAMb,OAAMC,MAAMa,YAClBC,IAAK,QACLC,SAAU,OACXC,GAAG,SAAS,SAAAC,GACX,OAAOpB,EAAOoB,MACfC,MAAK,SAAAC,GACJvB,EAAQuB,EAAIC,QAAQC,YAG5B,MAAOC,GAEHC,QAAQC,IAAIF,QAKXG,EAAiB,yDAAG,WAAOC,EAAcb,GAArB,6GAKnBf,EAAeC,OAAMC,MAAMC,aAG3BC,EAAMC,EAAWD,IAGjBG,EAAW,IAAIP,EAAaQ,IAAIC,SAASL,EAAKwB,GAX3B,SAYCrB,EAASsB,QAAQC,UAAUf,GAAagB,OAZzC,cAYnBC,EAZmB,yBAclBC,YAAYD,EAAc,KAAH,IAAG,GAAI,KAAIE,QAAQ,KAdxB,qCAkBzBT,QAAQC,IAAR,MAlByB,0DAAH,wDAsBjBS,EAAmB,yDAAG,WAAOP,EAAcQ,GAArB,2GAKrBpC,EAAeC,OAAMC,MAAMC,aAG3BC,EAAMC,EAAWD,IAGjBG,EAAW,IAAIP,EAAaQ,IAAIC,SAASL,EAAKwB,GAXzB,SAYdrB,EAASsB,QAAQQ,UAAUC,OAAOF,EAAe,KAAH,IAAI,GAAI,MAAMvB,KAAK,CAC1EC,KAAMb,OAAMC,MAAMa,cAbK,mKAAH,wDAsBnBwB,EAAqB,yDAAG,WAAOX,EAAcQ,GAArB,2GAKvBpC,EAAeC,OAAMC,MAAMC,aAG3BC,EAAMC,EAAWD,IAGjBG,EAAW,IAAIP,EAAaQ,IAAIC,SAASL,EAAKwB,GAXvB,SAYhBrB,EAASsB,QAAQW,YAAYF,OAAOF,EAAe,KAAH,IAAI,GAAI,MAAMvB,KAAK,CAC5EC,KAAMb,OAAMC,MAAMa,cAbO,mKAAH","file":"js/chunk-5db3892c.b2769b94.js","sourcesContent":["// General imports\n// import Web3 from 'web3'\nimport store from '../store/index'\n\n\n// Contract files\nimport tokenBEP20 from '../../truffleContracts/build/contracts/BEP20Token.json'\n\n\nexport const deployContract = (tokenName, tokenSymbol, totalSupply, interest) =>\n{\n    return new Promise((resolve, reject) => {\n        try\n        {\n            // Total supply calculated by interest\n            totalSupply = totalSupply * (1 + (interest/100))\n\n            // Web3 instance\n            const web3Instance = store.state.web3Provider\n\n            // Extract abi and bytecode from contract\n            const abi = tokenBEP20.abi\n            const bytecode = tokenBEP20.bytecode\n\n            // Create the instance of token\n            const contract = new web3Instance.eth.Contract(abi)\n            contract.deploy({\n                data: bytecode,\n                arguments: [tokenName, tokenSymbol, totalSupply]\n            }).send({\n                from: store.state.userAddress,\n                gas: 2501758,\n                gasPrice: 10000000000\n            }).on('error', error => {\n                return reject(error)\n            }).then(res => {\n                resolve(res.options.address)\n            })\n        }\n        catch (err)\n        {\n            console.log(err)\n        }\n    })\n}\n\nexport const getBalanceByToken = async (tokenAddress, userAddress) =>\n{\n    try\n    {\n        // Web3 instance\n        const web3Instance = store.state.web3Provider\n\n        // Extract abi and bytecode from contract\n        const abi = tokenBEP20.abi\n\n        // Create the instance of token\n        const contract = new web3Instance.eth.Contract(abi, tokenAddress)\n        const balanceBUSD = await contract.methods.balanceOf(userAddress).call()\n\n        return parseFloat((balanceBUSD / 10**18).toFixed(4))\n    }\n    catch (err)\n    {\n        console.log(err)\n    }\n}\n\nexport const buyTokensByContract = async (tokenAddress, numberTokens) =>\n{\n    try\n    {\n        // Web3 instance\n        const web3Instance = store.state.web3Provider\n\n        // Extract abi and bytecode from contract\n        const abi = tokenBEP20.abi\n\n        // Create the instance of token\n        const contract = new web3Instance.eth.Contract(abi, tokenAddress)\n        return await contract.methods.buyTokens(BigInt(numberTokens * (10**18))).send({\n            from: store.state.userAddress\n        })\n    }\n    catch (err)\n    {\n        return err\n    }\n}\n\nexport const claimTokensByContract = async (tokenAddress, numberTokens) =>\n{\n    try\n    {\n        // Web3 instance\n        const web3Instance = store.state.web3Provider\n\n        // Extract abi and bytecode from contract\n        const abi = tokenBEP20.abi\n\n        // Create the instance of token\n        const contract = new web3Instance.eth.Contract(abi, tokenAddress)\n        return await contract.methods.claimTokens(BigInt(numberTokens * (10**18))).send({\n            from: store.state.userAddress\n        })\n    }\n    catch (err)\n    {\n        return err\n    }\n}"],"sourceRoot":""}